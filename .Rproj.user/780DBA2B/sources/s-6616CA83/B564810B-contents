############################################################################
## Title:  Reproducible script for analysing the results of the 1D experiment
##         in Section 4.1
## Author: Andrew Zammit-Mangion
## Date:   20 December 2018
#############################################################################

library(dplyr)
library(ggplot2)
library(verification)
library(xtable)

## Functions that compute the diagnostics
MAPE <- function(true, pred) mean(abs(true - pred))
RMSPE <- function(true, pred) sqrt(mean((true - pred)^2))
CRPS <- function(true, pred, pred_var) crps(true, cbind(pred, sqrt(pred_var)))$CRPS
IS95 <- function(true, pred95l, pred95u) {
  alpha = 0.05
  ISs <- (pred95u - pred95l) + 2/alpha * (pred95l - true) * (true < pred95l) +
                        2/alpha * (true - pred95u) * (true > pred95u)
  mean(ISs)
}

## Dictionary to convert filename to method name
methoddict <- list(matern32.json = "GP",
                 ML.json = "SIWGP",
                 stan.json = "SDSP-MCMC",
                 VB.json = "SDSP",
                 DGP.json = "DGPsparse",
                 RFF2.json = "DGPRFF",
                 DGPMCMC.json = "DGPfull")

## Dictionary to convert filename to process name
processdict <- list(Monterrubio1D = "Y2",
                    step1D = "Y1")

## Extract all the results
allfnames <- dir("results", pattern = "*.json")
results <- NULL
subfnames <- allfnames#[grepl("step1D", allfnames)]
for(f in subfnames) {
  simname <- strsplit(f, "_")[[1]][1]
  simdata <- jsonlite::read_json(paste0("data/", simname, ".json"), simplifyVector = TRUE)
  X <- jsonlite::read_json(paste0("results/", f), simplifyVector = TRUE)

  ## If no 95% interval is given, compute it from the sd.
  if(is.null(X$pred_95l)) {
    X$pred_95l <- X$pred_mean - 2*sqrt(X$pred_var)
    X$pred_95u <- X$pred_mean + 2*sqrt(X$pred_var)
  }

  results <- rbind(results,
                   data.frame(fname = f,
                              simname = simname,
                              Model = tail(strsplit(f, "_")[[1]], n = 1),
                              MAPE = MAPE(simdata$f_true, X$pred_mean),
                              RMSPE = RMSPE(simdata$f_true, X$pred_mean),
                              CRPS = CRPS(simdata$f_true, X$pred_mean, X$pred_var),
                              IS95 = IS95(simdata$f_true, X$pred_95l, X$pred_95u)))
}

## Plot tables to be used in paper
results$Model = unlist(methoddict[as.character(results$Model)])
print(xtable(results %>%
               dplyr::filter(simname == "step1D") %>%
               dplyr::select(-fname, -simname) %>%
               arrange(Model),
             digits = 4,
             align = rep("l", 6)),
      include.rownames = FALSE)

print(xtable(results %>%
               dplyr::filter(simname == "Monterrubio1D") %>%
               dplyr::select(-fname, -simname) %>%
               arrange(Model),
             digits = 4,
             align = rep("l", 6)),
      include.rownames = FALSE)

## Put all the results into one big data frame for plotting
g <- list()
df <-df_obs <- NULL
for(i in seq_along(subfnames)) {
  simname <- strsplit(subfnames[i], "_")[[1]][1]
  method <- tail(strsplit(subfnames[i], "_")[[1]], n = 1)
  simdata <- jsonlite::read_json(paste0("data/", simname, ".json"), simplifyVector = TRUE)
  X <- jsonlite::read_json(paste0("results/", subfnames[i]), simplifyVector = TRUE)

  if(is.null(X$pred_95l))
    X$pred_95l <- X$pred_mean - 1.96*sqrt(X$pred_var)
  if(is.null(X$pred_95u))
    X$pred_95u <- X$pred_mean + 1.96*sqrt(X$pred_var)

  df <- rbind(df, data.frame(s = c(simdata$s),
                             ftrue = simdata$f_true,
                             pred_mean = c(X$pred_mean),
                             pred_95l = c(X$pred_95l),
                             pred_95u = c(X$pred_95u),
                             simname = simname,
                             method = method))

  df_obs <-rbind(df_obs, data.frame(s = simdata$sobs,
                                    y = simdata$y,
                                    simname = simname,
                                    method = method) )
}
df$method = unlist(methoddict[as.character(df$method)])
df$simname = unlist(processdict[as.character(df$simname)])
df_obs$method = unlist(methoddict[as.character(df_obs$method)])
df_obs$simname = unlist(processdict[as.character(df_obs$simname)])

## Produce the results plot
gall <- ggplot(df) + geom_ribbon(aes(s, ymin = pred_95l, ymax = pred_95u), alpha = 0.3) +
         geom_line(aes(s, pred_mean)) +
         geom_line(aes(s, ftrue), linetype = 2) +
         geom_point(data = df_obs, aes(s, y), size = 0.2) +
         ylab("") +
         theme_bw() + facet_grid(method~simname) +
          theme(text = element_text(size=20))

## Save the plot
ggsave(gall, file = "img/1Dresults.png", width = 12, height = 16)
